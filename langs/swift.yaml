extension: swift
casing:
  class: pascal_case
  method: camel_case
  enum: pascal_case
  enumMember: snake_case
primitiveTypes:
  void: Void
classes:
  OneString:
    type: String
    fields:
      length:
        template: "{{self}}.count"
    methods:
      substring:
        template: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{start}}) ..< {{self}}.index({{self}}.startIndex, offsetBy: {{end}})])"
      split:
        template: "{{self}}.split(separator: {{separator}}, omittingEmptySubsequences: false)"
      get:
        template: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{idx}})])"
      replace:
        includes: ["Foundation"]
        template: "{{self}}.replacingOccurrences(of: {{from}}, with: {{to}})"
      substrMatch:
        template: "String({{self}}[{{self}}.index({{self}}.startIndex, offsetBy: {{offset}}) ..< {{self}}.endIndex]).hasPrefix({{str}})"
  OneNumber:
    type: Int
  OneBoolean:
    type: Bool
  OneConsole:
    methods:
      print:
        template: "print({{str}})"
  OneArray:
    type: "[{{typeArgs[0]}}]"
    fields:
      length:
        template: "{{self}}.count"
    methods:
      add:
        mutates: true
        template: "{{self}}.append({{item}})"
      get:
        template: "{{self}}[{{index}}]"
      set:
        template: "{{self}}[{{index}}] = {{value}}"
  OneMap:
    methods:
      keys:
        template: "Array({{self}}.keys)"
      values:
        template: "Array({{self}}.values)"
      remove:
        mutates: true
        template: "{{self}}[{{key}}] = nil"
      hasKey:
        template: "{{self}}[{{key}}] != nil"
      get:
        template: "{{self}}[{{key}}]!"
      set:
        template: "{{self}}[{{key}}] = {{value}}"
  OneFile:
    methods:
      readText:
        includes: [Foundation]
        template: "try! String(contentsOfFile: {{fn}}, encoding: String.Encoding.utf8)"
  OneError:
    methods:
      raise:
        throws: true
        template: throw OneError.RuntimeError({{message}})
templates:
  testGenerator: |-
    {{if methodInfo.throws}}
      do {
          try {{class}}().{{method}}()
      } catch OneError.RuntimeError(let message) {
          print("Exception: \(message)");
      }
    {{else}}
      {{class}}().{{method}}()
    {{/if}}
  main: |-
    {{for inc in includes|sep=\n}}
      import {{inc}}
    {{/for}}

    {{for enum in enums|sep=\n}}
      enum {{enum.name}} {
          case 
        {{for item in enum.values|inline sep=", "}}
          {{item.name}}
        {{/for}}
      }
    {{/for}}

    {{for class in classes|sep=\n\n}}
      class {{class.name}} {
        {{for field in class.fields|sep=\n}}
          {{if field.static}}static {{/if}}var {{field.name}}: {{field.type}}{{if field.typeInfo.isComplexClass or field.typeInfo.isString}}?{{/if}}{{if field.initializer}} = {{gen(field.initializer)}}{{/if}}
        {{/for}}

        {{if class.constructor}}
          init({{genArgs(class.constructor)}}) {
              {{genBody(class.constructor.body)}}
          }
        {{/if}}

        {{for method in class.methods|sep=\n\n}}
          {{if method.static}}class {{/if}}func {{method.name}}({{genArgs(method)}}){{if method.throws}} throws{{/if}} -> {{method.returnType}} {
              {{genBody(method.body)}}
          }
        {{/for}}
      }
    {{/for}}

  genBody:
    args:
      - name: body
    template: |-
      {{for statement in body.statements|sep=\n}}
        {{statement.leadingTrivia}}{{gen(statement)}}
      {{/for}}

  genArgs:
    args:
      - name: method
    template: |-
      {{for param in method.parameters|sep=", "}}
        {{param.name}}: {{param.type}}
      {{/for}}
  genParams:
    args:
      - name: params
    template: |-
      {{for param in params|sep=", " inline}}
        {{gen(param)}}
      {{/for}}
  genVar:
    args:
      - name: itemVar
    template: "{{if itemVar.isMutable}}var{{else}}let{{/if}} {{if itemVar.isUnused}}_{{else}}{{itemVar.name}}{{/if}} = {{gen(itemVar.initializer)}}"
  genMethodArgs:
    args: 
      - name: methodArgs
    template: |-
      {{for arg in methodArgs|sep=", " inline}}
        {{arg.paramName}}: {{gen(arg)}}
      {{/for}}
expressions:
  call: |-
    {{if expr.method.methodRef.throws}}try {{/if}}{{gen(expr.method)}}({{genMethodArgs(expr.arguments)}})
  stringLiteral: '"{{expr.escapedText}}"'
  characterLiteral: '"{{expr.escapedText}}"'
  return: "return {{gen(expr.expression)}}"
  binary: "{{gen(expr.left)}} {{expr.operator}} {{gen(expr.right)}}"
  postfix: "{{gen(expr.operand)}}{{expr.operator}}"
  postfix++: "{{gen(expr.operand)}} += 1"
  postfix--: "{{gen(expr.operand)}} -= 1"
  prefix: "{{expr.operator}}{{gen(expr.operand)}}"
  prefix!: "!({{gen(expr.operand)}})"
  throw: "throw {{gen(expr.expression)}};"
  parenthesized: "({{gen(expr.expression)}})"
  numericLiteral: "{{expr.value}}"
  nullLiteral: "nil"
  variableDeclaration: "{{genVar(expr)}}"
  new: "{{gen(expr.cls)}}({{genMethodArgs(expr.arguments)}})"
  classReference: "{{expr.classRef.outName}}"
  enumReference: "{{expr.enumRef.outName}}"
  enumMemberReference: "{{expr.enumRef.outName}}.{{expr.enumMemberRef.outName}}"
  arrayLiteral: |-
    {{if expr.items.length > 0}}
      [{{genParams(expr.items)}}]
    {{else}}
      [{{expr.typeArgs[0]}}]()
    {{/if}}
  mapLiteral: |- 
    [
      {{for prop in expr.properties|sep=",\n"}}
        "{{prop.name}}": {{gen(prop.initializer)}}
      {{/for}}
    ]
  expressionStatement: "{{if !expr.expression.valueType.isVoid and expr.expression.exprKind == 'Call'}}_ = {{/if}}{{gen(expr.expression)}}"
  instanceMethod: "{{gen(expr.thisExpr)}}.{{expr.methodRef.outName}}"
  staticMethod: "{{expr.methodRef.classRef.outName}}.{{expr.methodRef.outName}}"
  localVar: "{{expr.varRef.name}}"
  methodArgument: "{{expr.varRef.name}}"
  instanceField: |-
    {{gen(expr.thisExpr)}}.{{expr.varRef.outName}}
    {{if expr.valueType.isComplexClass or expr.valueType.isString|inline}}!{{/if}}
  staticField: |-
    {{gen(expr.thisExpr)}}.{{expr.varRef.outName}}
    {{if expr.valueType.isComplexClass or expr.valueType.isString|inline}}!{{/if}}
  falseLiteral: "false"
  trueLiteral: "true"
  elementAccess: "{{gen(expr.object)}}[{{gen(expr.elementExpr)}}]"
  thisReference: self
  conditional: "{{gen(expr.condition)}} ? {{gen(expr.whenTrue)}} : {{gen(expr.whenFalse)}}"
  break: break
  templateString: |-
    "
    {{for part in expr.parts|inline}}
      {{if part.literal|inline}}
        {{part.text}}
      {{else}}
        \({{gen(part.expr)}})
      {{/if}}
    {{/for}}
    "
  foreach: |-
    for {{expr.itemVariable.name}} in {{gen(expr.items)}} {
        {{genBody(expr.body)}}
    }
  for: |-
    {{genVar(expr.itemVariable)}}
    while {{gen(expr.condition)}} {
        {{genBody(expr.body)}}
        {{gen(expr.incrementor)}}
    }
  while: |-
    while {{gen(expr.condition)}} {
        {{genBody(expr.body)}}
    }
  if: |-
    if {{gen(expr.condition)}} {
        {{genBody(expr.then)}}
    }
    {{if expr.else|inline}}
      {{" "}}
      {{if isIfBlock(expr.else)|inline}}
        else {{genBody(expr.else)}}
      {{else}}
        else {
            {{genBody(expr.else)}}
        }
      {{/if}}
    {{/if}}
